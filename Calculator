package Tugas.com;

// Abstraction
public abstract class Calculator {
    private double[] numbers;

    public Calculator(int size) {
        numbers = new double[size];
    }

    // Setter
    public void setNumber(int index, double number) {
        numbers[index] = number;
    }

    // Getter
    public double[] getNumbers() {
        return numbers;
    }

    public abstract double calculate();

    public void clear() {
        for (int i = 0; i < numbers.length; i++) {
            numbers[i] = 0;
        }
    }
}

Class BasicCalculator

package Tugas.com;

public class BasicCalculator extends Calculator {
    public BasicCalculator(int size) {
        super(size);
    }

    public void addNumber(double number) {
        for (int i = 0; i < getNumbers().length; i++) {
            if (getNumbers()[i] == 0) {
                setNumber(i, number);
                break;
            }
        }
    }

    public double calculate() {
        return add();
    }

    public double add() {
        double result = 0;
        for (double number : getNumbers()) {
            result += number;
        }
        return result;
    }

    public double subtract() {
        double result = getNumbers()[0];
        for (int i = 1; i < getNumbers().length; i++) {
            result -= getNumbers()[i];
        }
        return result;
    }

    public double multiply() {
        double result = 1;
        boolean hasNonZeroValue = false;

        for (double number : getNumbers()) {
            if (number != 0) {
                hasNonZeroValue = true;
                result *= number;
            }
        }

        if (!hasNonZeroValue) {
            result = 0;
        }

        return result;
    }


    public double divide() {
        double result = getNumbers()[0];
        for (int i = 1; i < getNumbers().length; i++) {
            if (getNumbers()[i] != 0) {
                result /= getNumbers()[i];
            }
        }
        return result;
    }
}
```
